// Cisc 124// K. Rebecca Langer// Student #:  4873715// This class contains the code for creating and modifying a hand of up to 7 cards.// NOTE:  This class expanded to compare hands more competantly and to work// with GUI interface.public class PokerHand implements Hand, Comparable {		// array holds the hand's cards.	Card [] handArray = new Card [7];		// gives the index of the last card in handArray[].	int lastCardPtr;		// constructor creates an empty hand.	PokerHand() { 		lastCardPtr = -1;			}			// Deals num cards from a deck    // The deck and position to deal from within that deck    // is specified by the deck iterator    public void deal( int num, Iterator deck, PlayerPanel panel, boolean open ){        	System.out.println ("deal cards!");       	  for (int i=0; i<num; i++) {		// checks to make sure the deck is not empty.		if (deck.hasNext()) {					// assigns the card at the top of the deck to the hand.			try {			Card drawnCard = (Card) deck.next();			insertCard( drawnCard );			panel.card[lastCardPtr].setImage (drawnCard.graphicCode(), open);    		}    		    		// if the hand is full the program will print an error message and			// leave the hand as it is.    		catch (HandFullException e) {    		System.out.println(e.getMessage());	    		return;    		}    	}       	 	else {    		System.out.println( "ERROR:  No more cards left in deck!");    	}          }    }    		// Deals num cards from a deck    // The deck and position to deal from within that deck    // is specified by the deck iterator    public void deal( int num, Iterator deck ) {	for (int i=0; i<num; i++) {		// checks to make sure the deck is not empty.		if (deck.hasNext()) {					// assigns the card at the top of the deck to the hand.			try {			Card drawnCard = (Card) deck.next();			insertCard( drawnCard );    		}    		    		// if the hand is full the program will print an error message and			// leave the hand as it is.    		catch (HandFullException e) {    		System.out.println(e.getMessage());	    		return;    		}    	}       	 	else {    		System.out.println( "ERROR:  No more cards left in deck!");    	}        }        }            // Inserts a card into a hand    // Throws an exception if the hand is full    public void insertCard ( Card card ) throws HandFullException{        // throws an exception if hand is already full.    if (lastCardPtr>=6)    	throw new HandFullException();        // adds the card passed to the method to handArray[].    else {	    lastCardPtr ++;    	handArray[lastCardPtr] = card; 		 	}        }            // Removes a card from a hand if it's in there    public static PokerHand cloneLess ( PokerHand hand, Card card ) {        // just returns if hand is already empty.    if (hand.getSize()==-1)    	return (hand);        // removes the given card.    else {        	PokerHand standIn = new PokerHand();    	    	int j=0;    	    	for (int i=0; i<=hand.getSize(); i++)    		if (hand.getCard(i)!=card) {    			try {    				standIn.insertCard(hand.handArray[i]);    			}    	    			catch (Exception e) {    				System.out.println(e.getMessage());	    				return standIn;    			}    			j++;    	}   	    return (standIn); 	}    }            // Returns a hand that is the calling hand and the parameter joined    // Thus the length of the returned hand is the sum of     // the lengths of the calling hand and the parameter hand     public Hand join ( Hand h ) {        PokerHand otherHand = (PokerHand) h;        PokerHand joinedHand = new PokerHand();        int i;        try{        for (i=0; i<=lastCardPtr; i++)    	joinedHand.insertCard (this.handArray[i]);    	    for (i=0; i<=otherHand.getSize(); i++)    	joinedHand.insertCard (otherHand.getCard(i));   	    return joinedHand;        }        catch (Exception e) {    		System.out.println(e.getMessage());	    		return joinedHand;    }            }        // Returns a String version of a hand that     // can be used to display the hand    public String toString( ){        String playerCards = new String();		// if hand has two or more cards this code excecutes.	if (lastCardPtr>0){		for (int i=0; i<lastCardPtr; i++) {			playerCards = playerCards + handArray[i].toString();			if (i < lastCardPtr-1)				playerCards = playerCards + ", ";		}				playerCards = playerCards + " and " + handArray[lastCardPtr].toString();				return (playerCards);	}		// if hand has only one card the name of the card alone is returned.	else if (lastCardPtr==0) {				return (handArray[0].toString());        }        // or if the hand is empty the string "nothing" is returned.    else        	return ("nothing");    	    }        // Returns a clone of a hand    // (a copy, not a pointer to the same hand)    // Overrides the clone method in the Object class    public Object clone ( ){        PokerHand cloneHand = new PokerHand();            for (int i=0; i<= lastCardPtr; i++) {    	    	try {    		cloneHand.insertCard(this.handArray[i]);    	}    	    	catch (Exception e) {    		System.out.println(e.getMessage());	    		return cloneHand;    	}    }                   return cloneHand;        }    	//returns lastCardPtr.	public int getSize() {		return lastCardPtr;		}	//returns the ith card in the hand.	public Card getCard (int i) {		return handArray[i];		}			// standard method for determining which of two hands is greater.	// in this case, the hand with the highest card is greatest.	public int compareTo (Object other) {		CardComparator c = new CardComparator();		PokerHand otherHand = (PokerHand) other;		PokerHand thisClone = (PokerHand) this.clone();	PokerHand otherClone = (PokerHand) otherHand.clone();		for (int i=0; i<5; i++) { 					if ( c.compare( thisClone.highCard(),otherClone.highCard()) < 0 )			return -1;					else if ( c.compare( thisClone.highCard(),otherClone.highCard()) > 0 )			return 1;					else {			thisClone = cloneLess (thisClone, thisClone.highCard());			otherClone = cloneLess (otherClone, otherClone.highCard());		}	}		return 0;}				// This method determines the value of the highest card in the hand	public Card highCard() {		CardComparator c = new CardComparator();		Card currentHighCard = new Card();		for (int i=0; i<=lastCardPtr; i++)		if (c.compare( handArray[i], currentHighCard) >= 0)			currentHighCard = handArray[i];				return currentHighCard;		}		// demo method to test functionality.	public static void main (String args[]) {		PokerDeck demoDeck = new PokerDeck();	Iterator deckIter = demoDeck.createIterator();		PokerHand demoHand = new PokerHand();		demoHand.deal(8, deckIter);			System.out.println(demoHand.toString());		}	}