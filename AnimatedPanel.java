import java.awt.*;import java.awt.event.*;import javax.swing.*;import javax.swing.Timer;// This class creates a special kind of JPanel with an animated poker// opponent in it.  It includes a timer to make the frames of the animation// change at specified intervals and a number of simple algorithms for// different moods.public class AnimatedPanel extends JPanel implements ActionListener {	// Timer makes frames of animation change at specified intervals	private Timer aniTimer;		// Opponent provides images and info on which mood algorithm	// should be used	private Opponent opp;		// JLabel holds current frame of animation	private JLabel portrait;		// int used to keep track of how long a given frame has held	private int i;		// used to maintain a shocked expression for a few timer cycles	private int shocktimer;	// Constructor creates an AnimatedPanel object and starts its timer.	AnimatedPanel (Opponent oppInput) {		super ();		opp = oppInput;		i=0;		shocktimer=0;		setLayout (new BorderLayout());		setBackground (Color.black);		portrait = new JLabel (opp.getNeutral());		add (portrait, BorderLayout.SOUTH);		// The timer fires every 500 milliseconds		aniTimer = new Timer (500, this);		aniTimer.start();	}	// This method is called whenever the timer fires and is used to	// determine which mood algorithm to call.	public void actionPerformed (ActionEvent e) {		if (shocktimer>0)			shockAlgorithm ();		else if (opp.getMood().equals ("neutral"))			blinkAlgorithm ();		else if (opp.getMood().equals ("pleased"))			pleasedAlgorithm ();		else if (opp.getMood().equals ("worried"))			worriedAlgorithm ();		}			// This method sets the current portrait image to a shocked expression	// and sets the shocktimer so the expression will hold for more than	// 500 milliseconds.	void flashShock () {			portrait.setIcon (opp.getShocked());		shocktimer = 1;				//System.out.println("shocked");				}			// This method keeps track of how long the shocked expression has held	void shockAlgorithm () {			shocktimer--;			//System.out.println ("still shocked");		}			// This method causes the blink animation to fire at random intervals.	void blinkAlgorithm () {				if (portrait.getIcon() == opp.getBlink()) {			portrait.setIcon (opp.getNeutral());			//System.out.println("neutral");		}		else {			i++;			int rndBlink = (int)((Math.random()*8)+1);			if (i>(rndBlink)) {				portrait.setIcon (opp.getBlink());				i=0;				//System.out.println("blink");			}		}			}			// This method causes the blink and pleased animations to excecute at 	// random intervals.	void pleasedAlgorithm () {				if (portrait.getIcon() != opp.getNeutral()) {			portrait.setIcon (opp.getNeutral());			//System.out.println("neutral");		}		else {			i++;			int rndBlink = (int)((Math.random()*8)+1);			if (i>(rndBlink)) {				int whichEmote = (int)((Math.random()*3)+1);				if (whichEmote < 3) {					portrait.setIcon (opp.getBlink());					i=0;					//System.out.println("blink");				}				else if (whichEmote == 3) {					portrait.setIcon (opp.getPleased());					i=0;					//System.out.println("pleased");				}				}		}			}			// This method causes the blink and pleased animations to excecute at 	// random intervals.	void worriedAlgorithm () {			if (portrait.getIcon() != opp.getNeutral()) {			portrait.setIcon (opp.getNeutral());			//System.out.println("neutral");		}		else {			i++;			int rndBlink = (int)((Math.random()*8)+1);			if (i>(rndBlink)) {				int whichEmote = (int)((Math.random()*3)+1);				if (whichEmote < 3) {					portrait.setIcon (opp.getBlink());					i=0;					//System.out.println("blink");				}				else if (whichEmote == 3) {					portrait.setIcon (opp.getWorried());					i=0;					//System.out.println("worried");				}				}		}			}}