// Cisc 124// K. Rebecca Langer// Student #:  4873715// This class contains an array of 52 unique cards, corresponding to the cards// in a typical deck of playing cards.  When initialized it initializes its// 52 cards in turn and then shuffles them into a random order.public class PokerDeck implements Deck {	// array of cards.	Card [] deckOfCards = new Card [52];		// this int indicates the position of the top card of the deck.	int cardPtr;//Constructor method creates a deck of 52 unique cards and shuffles them.PokerDeck(){		cardPtr = 0;		int i;		// creating spades	for( i=0 ; i<13 ; i++ )		deckOfCards[i] = new Card(1, i+1);		// creating diamonds	for( i=0 ; i<13 ; i++ )		deckOfCards[i+13] = new Card(2, i+1);		// creating clubs	for( i=0 ; i<13 ; i++ )		deckOfCards[i+26] = new Card(3, i+1);		// creating hearts	for( i=0 ; i<13 ; i++ )		deckOfCards[i+39] = new Card(4, i+1);		//shuffling the deck	shuffle();		  }  // Shuffles the deck  public void shuffle( ){        // array of integers indicating which cards have been moved to the new,    // shuffled deck and which have not.    int [] shuffleMarks = new int [52];        // shuffleMarks[] elements are set to 0 to indicate the cards are still    // all in place.    for( int i=0 ; i<52; i++ )		shuffleMarks[i] = 0;        // new array to move cards into in random order.    Card [] shuffledDeck = new Card [52];        // selects a random card from the deck and puts it into the temporary    // array shuffledDeck 52 times, once for each card.    for (int k=0; k<52; k++) {			while (0==0) {					// intentional infinite loop						// selecting a random position			int rndCard = (int)(Math.random()*52);					// checking to see if the card at that position has			// already been moved over, and moving it if it hasn't.			if (shuffleMarks[rndCard] == 0){				shuffledDeck[k] = deckOfCards[rndCard];				shuffleMarks[rndCard] = 1;				break;			}						// if the card has already been moved over the computer will			// just pick a new random position and try again.			else				continue;						}  	}        // moving the newly shuffled cards back into our main array of    // cards, deckOfCards[].    for( int j=0 ; j<52; j++ )    	deckOfCards[j] = shuffledDeck[j];            }    // Returns a String version of a deck that     // can be used to display the deck.    public String toString( ){        String returnString = new String();        // prints out all the elements of the deck in order, seperated by commas.    for( int i=0 ; i<52; i++ )    	returnString = returnString + deckOfCards[i].toString() + ", ";    	    return returnString;        }                 // Returns an Iterator to traverse a deck    public Iterator createIterator( ){        return (Iterator) new DeckIterator ();        }	// inner iterator class.	public class DeckIterator implements Iterator {				// checks to see if there are any more cards in the deck.		public boolean hasNext ()		{		    if (cardPtr < 52)			return true;		    else			return false;		}		// returns the card at the top of the deck.		public Object next ()		{		    Object currentObject = (Object) deckOfCards[cardPtr];		    cardPtr++;		    return currentObject;		 }		}		// demo program to test class.		public static void main (String args[]){		PokerDeck demoDeck = new PokerDeck();		System.out.println( demoDeck );		}			}